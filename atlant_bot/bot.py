import datetime
import shelve
import textwrap

import pytz
from telegram import Update
from telegram.ext import ContextTypes

from atlant_bot.parser import Gazovik
from atlant_bot.settings import STORAGE_FILENAME

DAILY_TIME = datetime.time(hour=7, minute=30, tzinfo=pytz.timezone("Europe/Kiev"))
DAYS_EFFECTIVE = (1, 2, 3, 4, 5)

gazovik = Gazovik()


def _balance_message(balance: float) -> str:
    return f"–ë–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω"


async def send_notification_job(context: ContextTypes.DEFAULT_TYPE):
    balance = gazovik.get_balance()

    with shelve.open(STORAGE_FILENAME) as db:
        for chat_id in db["subscribed"]:
            await context.bot.send_message(
                chat_id=chat_id, text=_balance_message(balance)
            )


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat:
        return
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text="–ó–∞—á–µ–∫–∞–π, –±—É–¥—å –ª–∞—Å–∫–∞..."
    )

    balance = gazovik.get_balance()
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=_balance_message(balance)
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat:
        return

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=textwrap.dedent(
            """\
        –ü—Ä–∏–≤—ñ—Ç!
        –©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –±–∞–ª–∞–Ω—Å —Ç–∏—Å–Ω–∏ /subscribe üîî
        –Ø–∫—â–æ —Ö–æ—á–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –∑–∞—Ä–∞–∑, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /balance üôÇ
        """
        ),
    )


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat:
        raise ValueError("Chat is not set")

    with shelve.open(STORAGE_FILENAME) as db:
        current_subscribers = db.get("subscribed", [])
        if update.effective_chat.id in current_subscribers:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=textwrap.dedent(
                    """
                    –¢–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è üîî
                    –©–æ–± –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å, —Ç–∏—Å–Ω–∏ /unsubscribe üîï
                    """
                ),
            )
            return
        current_subscribers.append(update.effective_chat.id)
        db["subscribed"] = current_subscribers
        print(db["subscribed"])

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=textwrap.dedent(
            """
        –ù—É –≤—Å–µ.. —Ç–µ–ø–µ—Ä, —Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è üîî
        –û—á—ñ–∫—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–æ–±–æ—á—ñ –¥–Ω—ñ –æ 8 –≥–æ–¥–∏–Ω—ñ üôÇ

        –¢–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å, –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç–∏—Å–Ω—É—Ç–∏ /unsubscribe üîï
        """
        ),
    )


async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat:
        raise ValueError("Chat is not set")

    with shelve.open(STORAGE_FILENAME) as db:
        if update.effective_chat.id not in db["subscribed"]:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–¢–∏ —ñ –Ω–µ –±—É–≤ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ü§ì",
            )
            return

        current_subscribers = db["subscribed"]
        current_subscribers.remove(update.effective_chat.id)
        db["subscribed"] = current_subscribers

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=textwrap.dedent(
            """
        –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å üîï
        –Ø–∫—â–æ –∑–º—ñ–Ω–∏—à —Å–≤–æ—é –¥—É–º–∫—É, —Ç–∏—Å–Ω–∏ /subscribe üîî
        """
        ),
    )
